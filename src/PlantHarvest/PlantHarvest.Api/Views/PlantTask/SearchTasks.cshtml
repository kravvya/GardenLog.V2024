@using System.ComponentModel;
@model (IReadOnlyCollection<PlantTaskViewModel> data, bool isReadOnly)

@{
    DateTime _now = DateTime.Now;
    Dictionary<WorkLogReasonEnum, string> reasons = new();

    string GetTableClass(PlantTaskViewModel task, string level)
    {
        if (level.Equals("row") && !task.CompletedDateTime.HasValue)
        {
            //we are past due - red alert
            if (task.TargetDateStart < _now) return "#dc3545";

            if (task.TargetDateStart < _now.AddDays(2)) return "#ffc107";
        }
        else
        {
            switch (task.Type)
            {
                case WorkLogReasonEnum.Harvest:
                    return "#198754";
                case WorkLogReasonEnum.Issue:
                    return "#dc3545";
                case WorkLogReasonEnum.IssueResolution:
                    return "#ffc107;";
            }
        }

        return "inherit";
    }

    string GetTaskDescription(WorkLogReasonEnum value)
    {
        if (reasons.TryGetValue(value, out string? task)) return task;

        var fieldInfo = value.GetType().GetField(value.ToString());

        if (fieldInfo == null) return value.ToString();

        var attributes = (DescriptionAttribute[])fieldInfo.GetCustomAttributes(typeof(DescriptionAttribute), false);

        task =  attributes.Length > 0 ? attributes[0].Description : value.ToString();

        reasons.TryAdd(value, task);

        return task;
    }

    string GetViewTitle(bool isReadOnly)
    {
        return isReadOnly ? "Past Due Tasks" : "Tasks for upcomming week";
    }

}
@if (Model.data.Count > 0)
{
    <h4>@GetViewTitle(Model.isReadOnly)</h4>
    <hr />

    <div>
        <table class="table" style="width: 100%;">
            <thead>
                <tr style ="border:1px solid black;">
                    <th scope="col" style="padding-top: 10px; border-top:1px solid black;"></th>
                    <th scope="col" style="padding-top: 10px; border-top:1px solid black;">Task</th>
                    <th scope="col" style="padding-top: 10px; border-top:1px solid black;">Plant</th>
                    <th scope="col" style="padding-top: 10px; border-top:1px solid black;">Start</th>
                    <th scope="col" style="padding-top: 10px; border-top:1px solid black;">End</th>
                    <th scope="col" style="padding-top: 10px; border-top:1px solid black;">Note</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var task in Model.data.OrderBy(t => t.CreatedDateTime)) 
                {
                    <tr style="background-color:@GetTableClass(task, "row");">
                        <td style="background-color:@GetTableClass(task, "column"); padding-top:10px; border-top:1px solid black;">&nbsp;&nbsp;</td>
                        <td style="padding-top: 10px; border-top:1px solid black;">@GetTaskDescription(@task.Type)</td>
                        <td style="padding-top: 10px; border-top:1px solid black;"><span class="fw-semibold">@task.PlantName</span></td>
                        <td style="padding-top: 10px; border-top:1px solid black;">@task.TargetDateStart.ToString("MM/dd")</td>
                        <td style="padding-top: 10px; border-top:1px solid black;">@task.TargetDateEnd.ToString("MM/dd")</td>
                        <td style="padding-top: 10px; border-top:1px solid black;" colspan="1">@task.Notes</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <a href="https://kravvya.github.io/GardenLog.V2023/" >GardenLog Site</a>
}
