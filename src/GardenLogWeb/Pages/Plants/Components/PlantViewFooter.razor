@inject NavigationManager _navigationManager

@if (Plant != null && !string.IsNullOrWhiteSpace(Plant.PlantId))
{
    <ModalView OnCloseModal="CloseImageFormModal" @ref="ImageFormModal">
        <Body>
            <ImageForm OnClose=@CloseImageFormModal @ref=ImageForm />
        </Body>
    </ModalView>
    <ModalView OnCloseModal="@CloseImageListModal" @ref="_imageListModal">
        <Body>
            <ImageList OnClose=@CloseImageListModal @ref=_imageList />
        </Body>
    </ModalView>


    <div class="d-flex gap-2 flex-nowrap justify-content-md-start">
        <AuthorizeView Roles="@(GlobalConstants.ROLE_MASTER_GARDENER + ", " + GlobalConstants.ROLE_WRITE_PLANTS)">
            <button type="button" class="btn btn-secondary" title="Edit Plant" @onclick="@(() => OnEdit())"><span class="bi bi-pencil">&nbsp;</span></button>
        </AuthorizeView>
        <AuthorizeView Roles="@(GlobalConstants.ROLE_MASTER_GARDENER + ", " + GlobalConstants.ROLE_WRITE_PLANT_VARIETIES)">
            <button type="button" class="btn btn-secondary" title="Add Variety" @onclick="@(() => OnAddVariety())"><span class="bi bi-flower1">&nbsp;</span></button>
        </AuthorizeView>
        <AuthorizeView Roles="@(GlobalConstants.ROLE_MASTER_GARDENER + ", " + GlobalConstants.ROLE_WRITE_GROW_INSTRUCTIONS)">
            <button type="button" class="btn btn-secondary" title="Add Growing Instruction" @onclick="@(() => OnAddGrowInstruction())"><span class="bi bi-card-checklist">&nbsp;</span></button>
        </AuthorizeView>
        <AuthorizeView Roles="@(GlobalConstants.ROLE_MASTER_GARDENER + ", " + GlobalConstants.ROLE_WRITE_PLANTS)">
            <button type="button" class="btn btn-warning" title="Add Image" @onclick="@(() => OnAddPlantImage())"><span class="bi bi-card-image">&nbsp;</span></button>
        </AuthorizeView>
        <button type="button" class="btn btn-info" title="Gallery" @onclick="@(() => onViewGallery())">&nbsp;<span class="bi bi-images" aria-hidden="true"></span></button>
        <button type="button" class="btn btn-danger" title="Close" @onclick="@(() => OnClose())"><span class="bi bi-x-circle">&nbsp;</span></button>
    </div>

}
@code {
    [Parameter]
    public PlantModel? Plant { get; set; }

    [Parameter]
    public Action? Close { get; set; }

    private ModalView? ImageFormModal { get; set; }
    private ImageForm? ImageForm { get; set; }

    private ModalView? _imageListModal;
    private ImageList? _imageList;

    private async Task OnAddPlantImage()
    {
        if (Plant != null && ImageForm != null && ImageFormModal != null)
        {
            List<RelatedEntity> relatedEntities = new() { new RelatedEntity(RelatedEntityTypEnum.Plant, Plant.PlantId, Plant.Name) };
            ImageForm.Initialize(RelatedEntityTypEnum.Plant, Plant.PlantId, relatedEntities);
            await ImageFormModal.OpenModal(Plant.Name, Plant.Color);
            StateHasChanged();
        }
    }

    private async Task onViewGallery()
    {
        if (Plant != null && _imageList != null && _imageListModal != null)
        {
            await _imageList.Initialize(RelatedEntityTypEnum.Plant, Plant.PlantId);
            await _imageListModal.OpenModal(Plant.Name, Plant.Color);

            StateHasChanged();
        }
    }

    private void OnAddVariety()
    {
        if (Plant != null) _navigationManager.NavigateToCreatePlantVariety(Plant.PlantId);
    }


    private void OnAddGrowInstruction()
    {
        if (Plant != null) _navigationManager.NavigateToCreatePlantGrowInstruction(Plant.PlantId);
    }

    private void OnEdit()
    {
        if (Plant != null) _navigationManager.NavigateToEditPlant(Plant.PlantId);
    }

    private async Task CloseImageFormModal()
    {
        await ImageFormModal!.CloseModal();
        StateHasChanged();
    }

    private async Task CloseImageFormModal(ImageViewModel image)
    {
        await ImageFormModal!.CloseModal();

        if (Plant != null)
        {
            if (Plant.Images == null) Plant.Images = new();

            if (Plant.ImageFileName == ImageService.NO_IMAGE)
            {
                Plant.ImageFileName = image.FileName;
                Plant.ImageLabel = image.Label;
                Plant.Images.Add(image);
            }           
            Plant.Images.Add(image);
        }
        StateHasChanged();
    }

    private async Task CloseImageListModal()
    {
        await _imageListModal!.CloseModal();
        StateHasChanged();
    }

    private void OnClose()
    {
        if (Close != null)
            Close();
    }

}
