<div>
    @if (_forecastDays == null)
    {
        <p><em>Getting weather forecast ....</em></p>
    }
    else
    {
        <div class="card-group">
            @foreach (var daily in _forecastDays)
            {
                <div class="card">
                    <div class="card-header text-center"><h5 class="card-title">@daily.Name</h5></div>
                    <div class="card-body">
                        @if (daily.Day != null)
                        {
                            <WeatherForecastDay Forecast="@daily.Day" />

                            <hr />
                        }
                        <WeatherForecastDay Forecast="@daily.Night" />
                    </div>
                </div>
            }
        </div>
    }
</div>

@code {
    [Parameter] public WeatherForecastModel? Forecast { get; set; }

    private List<WeatherForecastDayModel>? _forecastDays;

    protected override void OnParametersSet()
    {
        if (Forecast == null) return;

        _forecastDays = new();
        WeatherForecastDayModel? daily = null;

        foreach (var dailyForecast in Forecast.DailyForecasts)
        {
            WeatherForecastSummaryModel summary = new()
                {
                    Main = dailyForecast.Conditions!.Main.Substring(0, Math.Min(dailyForecast.Conditions!.Main.Length, 20)),
                    Description = dailyForecast.Conditions!.Description,
                    Temperature = dailyForecast.Forecast!.Temp,
                    Humidity = dailyForecast.Forecast!.Humidity,
                    WindSpeed = dailyForecast.Wind!.Speed,
                    Icon = GetIcon(dailyForecast)
                };

            if (dailyForecast.Forecast!.ChanceOfPrecipitation.HasValue)
            {
                if (dailyForecast.Conditions!.Main.Contains("rain", StringComparison.OrdinalIgnoreCase))
                {
                    summary.ChanceOfRain = dailyForecast.Forecast!.ChanceOfPrecipitation;
                }
                else
                {
                    summary.ChanceOfSnow = dailyForecast.Forecast!.ChanceOfPrecipitation;
                }
            }

            if (daily == null) daily = new WeatherForecastDayModel()
                {
                    Name = dailyForecast.Name
                };

            if (dailyForecast.IsDaytime)
            {
                daily.Day = summary;
            }
            else
            {
                daily.Night = summary;
                _forecastDays.Add(daily);
                daily = null;
            };

        };

        StateHasChanged();
    }

    private string GetIcon(DailyForecast dailyForecast)
    {
        //https://github.com/metno/weathericons/tree/main/weather
        var conditions = dailyForecast.Conditions!;

        if ((conditions.Main.Contains("clear", StringComparison.OrdinalIgnoreCase) && dailyForecast.IsDaytime)
            || (conditions.Main.Contains("Sunny", StringComparison.OrdinalIgnoreCase)))
            return "clearsky_day.png";

        if (conditions.Main.Contains("clear", StringComparison.OrdinalIgnoreCase) && !dailyForecast.IsDaytime)
            return "clearsky_night.png";

        if (conditions.Main.Contains("Rain", StringComparison.OrdinalIgnoreCase) && dailyForecast.IsDaytime)
            return "rainshowers_day.png";

        if (conditions.Main.Contains("Rain", StringComparison.OrdinalIgnoreCase) && !dailyForecast.IsDaytime)
            return "rainshowers_night.png";

        if (conditions.Main.Contains("Snow", StringComparison.OrdinalIgnoreCase) && dailyForecast.IsDaytime)
            return "snowshowers_day.png";

        if (conditions.Main.Contains("Snow", StringComparison.OrdinalIgnoreCase) && !dailyForecast.IsDaytime)
            return "snowshowers_night.png";

        if (conditions.Main.Contains("Mostly Cloudy", StringComparison.OrdinalIgnoreCase)
            || conditions.Main.Contains("Cloudy", StringComparison.OrdinalIgnoreCase))
            return "cloudy.png";

        if (conditions.Main.Contains("Partly Sunny", StringComparison.OrdinalIgnoreCase) && dailyForecast.IsDaytime)
            return "partlycloudy_day.png";

        if (conditions.Main.Contains("Partly Cloudy", StringComparison.OrdinalIgnoreCase) && !dailyForecast.IsDaytime)
            return "partlycloudy_night.png";

        if (conditions.Main.Contains("Partly", StringComparison.OrdinalIgnoreCase) && dailyForecast.IsDaytime)
            return "fair_day.png";

        if (conditions.Main.Contains("Partly", StringComparison.OrdinalIgnoreCase) && !dailyForecast.IsDaytime)
            return "fair_night.png";

        if (conditions.Main.Contains("Fog", StringComparison.OrdinalIgnoreCase))
            return "fog.png";



        return "clearsky_polartwilight.png";
    }
}
