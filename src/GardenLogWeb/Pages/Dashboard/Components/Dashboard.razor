@inject IHarvestCycleService _harvestService;
@inject IPlantTaskService _taskService;
@inject IGardenService _gardenService;
@inject IImageService _imageService;
@inject NavigationManager _navigationManager;

<div class="container-fluid px-4">
    <h1 class="mt-4">Garden Plan Progress</h1>

    <div class="row">
        <div class="col-xl-3 col-md-6">
            <div class="card bg-primary text-white mb-4">
                <div class="card-header d-flex justify-content-between">
                    <div class="card-title">Completed Tasks</div>
                    @if (_harvest != null)
                    {
                        <button type="button" class="btn btn-primary" title="View Details" onclick="@(() => _navigationManager.NavigateToPlantTasks(_harvest.HarvestCycleId))">
                            <span class="bi bi-info-lg  text-white "></span>
                        </button>
                    }
                </div>
                <div class="card-body text-center fs-1">@_numberOfCompletedTasks</div>

            </div>
        </div>
        <div class="col-xl-3 col-md-6">
            <div class="card bg-primary text-white mb-4">
                <div class="card-header d-flex justify-content-between">
                    <div class="card-title"># of Scheduled Tasks</div>
                    @if (_harvest != null)
                    {
                        <button type="button" class="btn btn-primary" title="View Details" onclick="@(() => _navigationManager.NavigateToPlantTasks(_harvest.HarvestCycleId))">
                            <span class="bi bi-info-lg  text-white "></span>
                        </button>
                    }
                </div>
                <div class="card-body text-center fs-1">@_numberOfActiveTasks</div>

            </div>
        </div>
        <div class="col-xl-3 col-md-6">
            <div class="card bg-secondary text-white mb-4">
                <div class="card-header d-flex justify-content-between">
                    <div class="card-title"># of Due Soon Tasks</div>
                    @if (_harvest != null)
                    {
                        <button type="button" class="btn btn-secondary" title="View Details" onclick="@(() => _navigationManager.NavigateToPlantTasks(_harvest.HarvestCycleId))">
                            <span class="bi bi-info-lg  text-white "></span>
                        </button>
                    }
                </div>
                <div class="card-body text-center fs-1">@_numberOfDueSoonTasks</div>

            </div>
        </div>
        <div class="col-xl-3 col-md-6">
            <div class="card bg-danger text-white mb-4">
                <div class="card-header d-flex justify-content-between">
                    <div class="card-title"># of Past Due Tasks</div>
                    @if (_harvest != null)
                    {
                        <button type="button" class="btn btn-danger" title="View Details" onclick="@(() => _navigationManager.NavigateToPlantTasks(_harvest.HarvestCycleId))">
                            <span class="bi bi-info-lg  text-white "></span>
                        </button>
                    }
                </div>
                <div class="card-body text-center fs-1">@_numberOfPastDueTasks</div>

            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-xl-8">
            <div class="card mb-4 border border-1" style="border-color: #A0C136 !important;">
                <div class="card-header d-flex justify-content-between text-white  bg-info">
                    <div>
                        <i class="bi bi-clipboard me-1"></i>
                        Garden Plan Summary
                    </div>
                    @if (_harvest != null)
                    {
                        <button type="button" class="btn btn-info" title="View Details" onclick="@(() => _navigationManager.NavigateToGardenPlanLayout(_harvest.HarvestCycleId))">
                            <span class="bi bi-info-lg  text-white "></span>
                        </button>
                    }
                </div>
                <div class="card-body d-flex justify-content-between">
                    <div class="variety-facts-list">
                        <h4>Garden Plan Name</h4>
                        <dl>
                            <dt class="variety-facts-term">Selected Plants:</dt>
                            <dd class="variety-facts-item">@_numberOfPlants</dd>
                            <dt class="variety-facts-term">Selected Varieties:</dt>
                            <dd class="variety-facts-item">@_numberOfPlantVarieties</dd>
                            <dt class="variety-facts-term">Start Date:</dt>
                            <dd class="variety-facts-item">@_harvest?.StartDate.ToShortDateString()</dd>
                            <dt class="variety-facts-term">End Date:</dt>
                            <dd class="variety-facts-item">
                                @if (_harvest != null && _harvest.EndDate.HasValue)
                                {
                                    @_harvest?.EndDate.Value.ToShortDateString()
                                }
                            </dd>
                        </dl>
                    </div>
                    <div class="vr"></div>
                    <div>
                        <PieChartOfGrowMethods HarvestPlants="@_harvestPlants"></PieChartOfGrowMethods>
                    </div>
                    <div class="vr"></div>
                    <div class="variety-facts-list">
                        <h4>Garden Name</h4>
                        <dl>
                            <dt class="variety-facts-term">Grow Area:</dt>
                            <dd class="variety-facts-item">@_totalGrowArea sq. ft.</dd>
                            <dt class="variety-facts-term">Free Grow Area:</dt>
                            <dd class="variety-facts-item">@_freeGrowArea sq. ft</dd>
                            <dt class="variety-facts-term">Number of beds:</dt>
                            <dd class="variety-facts-item">@_numberOfGardenBeds</dd>
                            <dt class="variety-facts-term">Number of free beds:</dt>
                            <dd class="variety-facts-item">@_numberOfFreeBeds</dd>
                        </dl>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-xl-4">
            <div class="card mb-4 border border-1" style="border-color: #A0C136 !important;">
                <div class="card-header d-flex justify-content-between text-white  bg-info">
                    <div>
                        <i class="bi bi-calendar-event me-1"></i>
                        Plants
                    </div>
                    @if (_harvest != null)
                    {
                        <button type="button" class="btn btn-info" title="View Details" onclick="@(() => _navigationManager.NavigateToGardenPlan(_harvest.HarvestCycleId))">
                            <span class="bi bi-info-lg  text-white "></span>
                        </button>
                    }
                </div>
                <div class="card-body">
                    @if (_harvestPlants != null)
                    {
                        <BarChartOfGardenPlantStatus HarvestPlants="@_harvestPlants"></BarChartOfGardenPlantStatus>
                    }
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-xl-12 " data-bs-theme="dark">

            <div class="card mb-4 border border-1" style="border-color: #A0C136 !important;">
                <div class="card-header d-flex justify-content-between text-white  bg-info">
                    <div>
                        <i class="bi bi-images me-1"></i>
                        Garden Photos
                    </div>
                    @if (_harvest != null)
                    {
                        <button type="button" class="btn btn-info" title="Garden Plan Gallery" onclick="@(() => _navigationManager.NavigateToGardenPlanImages(_harvest.HarvestCycleId))">
                            <span class="bi bi-card-image text-white "></span>
                        </button>
                    }
                </div>
                <div class="card-body">
                    @if (_images != null)
                    {
                        <div id="carouselImages" class="carousel slide" data-ride="carousel">
                            <div class="carousel-indicators">
                                @for (int index = 0; index < _images.Count; index++)
                                {
                                    <button type="button" data-bs-target="#carouselImages" data-bs-slide-to="@index" class="@(index==0?"active":"")" aria-current="@(index==0)" aria-label="@_images[index].Label"></button>
                                }
                            </div>
                            <div class="carousel-inner">
                                @foreach (var (image, index) in _images.Select((img, i) => (img, i)))
                                {
                                    <div class="carousel-item @(index==0 ? "active" : "")">
                                        <div class=" d-flex justify-content-center">
                                            <img src="@_imageService.GetRawImageUrl(image.FileName)" alt="@image.Label" class="d-block" style="max-height:400px">
                                            <div class="carousel-caption d-none d-md-block">
                                                <h5>@image.Label</h5>
                                                <p>@image.CreatedDateTimeUtc.ToShortDateString()</p>
                                            </div>
                                         </div>
                                    </div>
                                }
                        </div>
                            <button class="carousel-control-prev" type="button" data-bs-target="#carouselImages" data-bs-slide="prev">
                                <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                                <span class="visually-hidden">Previous</span>
                            </button>
                            <button class="carousel-control-next" type="button" data-bs-target="#carouselImages" data-bs-slide="next">
                                <span class="carousel-control-next-icon" aria-hidden="true"></span>
                                <span class="visually-hidden">Next</span>
                            </button>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private DateTime _now = DateTime.Now;
    private HarvestCycleModel? _harvest;
    private List<PlantHarvestCycleModel>? _harvestPlants;
    private List<ImageViewModel>? _images;
    private long _numberOfCompletedTasks;
    private int _numberOfActiveTasks;
    private int _numberOfDueSoonTasks;
    private int _numberOfPastDueTasks;
    private int _numberOfPlants;
    private int _numberOfPlantVarieties;
    private string _totalGrowArea = "0";
    private string _freeGrowArea = "0";
    private int _numberOfGardenBeds;
    private int _numberOfFreeBeds;


    protected async override Task OnInitializedAsync()
    {
        _harvest = await _harvestService.GetActiveHarvestCycle();
        if (_harvest != null)
        {
            var completedTask = _taskService.GetNumberOfCompletedTasks(_harvest.HarvestCycleId);
            var tasksTask = _taskService.GetActivePlantTasks(false);
            var harvestPlantTask = _harvestService.GetPlantHarvests(_harvest.HarvestCycleId, false);
            var imageTask = _imageService.GetImages(RelatedEntityTypEnum.HarvestCycle, _harvest.HarvestCycleId, true);

            await Task.WhenAll(completedTask, tasksTask, harvestPlantTask, imageTask);

            _numberOfCompletedTasks = completedTask.Result;
            var tasks = tasksTask.Result;
            _harvestPlants = harvestPlantTask.Result;
            _images = imageTask.Result;

            _numberOfActiveTasks = tasks.Count;
            _numberOfDueSoonTasks = tasks.Where(t => t.TargetDateStart < _now.AddDays(2) && t.TargetDateStart > _now).Count();
            _numberOfPastDueTasks = tasks.Where(t => t.TargetDateStart < _now).Count();
            _numberOfPlants = _harvestPlants.Select(p => p.PlantId).Distinct().Count();
            _numberOfPlantVarieties = _harvestPlants.Select(p => p.PlantVarietyId).Distinct().Count();

            if (!string.IsNullOrWhiteSpace(_harvest.GardenId))
            {
                var gardenTask = _gardenService.GetGarden(_harvest.GardenId, true);
                var gardenBedsTask = _gardenService.GetGardenBeds(_harvest.GardenId, true);
                await Task.WhenAll(gardenTask, gardenBedsTask);

                var garden = gardenTask.Result;
                var gardenBeds = gardenBedsTask.Result;

                if (gardenBeds != null)
                {
                    _totalGrowArea = (gardenBeds.Sum(g => g.Length * g.Width) / 12).ToString("N0", System.Globalization.CultureInfo.InvariantCulture);


                    var usedArea = _harvestPlants.SelectMany(h => h.GardenBedLayout).Sum(p => p.Length * 12 * p.Width * 12);
                    var totalArea = gardenBeds.Sum(g => g.Length * g.Width);
                    _freeGrowArea = ((totalArea - usedArea) / 12).ToString("N0", System.Globalization.CultureInfo.InvariantCulture); ;
                    _freeGrowArea = ((totalArea - usedArea) / 12).ToString("N0", System.Globalization.CultureInfo.InvariantCulture); ;
                    _numberOfGardenBeds = gardenBeds.Count();

                    if (_harvestPlants != null)
                    {
                        var numberOfBedsInUse = _harvestPlants.SelectMany(h => h.GardenBedLayout)
                        .Select(p => p.GardenBedId)
                        .Distinct()
                        .Count();

                        _numberOfFreeBeds = _numberOfGardenBeds - numberOfBedsInUse;
                    }

                }

            }


        }
    }

}
