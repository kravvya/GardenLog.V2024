@inject IHarvestCycleService HarvestCycleService
@inject ILogger<GardenBedUsageHistory> Logger

<div class="custom-modal" style="display:@(Show ? "block" : "none"); position: absolute; top:@Top; left:@Left; z-index: 1050; background-color: white; border: 1px solid #dee2e6; border-radius: .3rem; box-shadow: 0 .5rem 1rem rgba(0,0,0,.15);">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Garden Bed Usage History</h5>
                <button type="button" class="btn-close" @onclick="Close"></button>
            </div>
            <div class="modal-body">
                @if (UsageHistory != null && UsageHistory.Count > 0)
                {
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>Start Date</th>
                                <th>End Date</th>
                                <th>Plant</th>
                                <th>Plant Variety</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in UsageHistory)
                            {
                                <tr>
                                    <td>@item.StartDate?.ToString("yyyy-MM")</td>
                                    <td>@item.EndDate?.ToString("yyyy-MM")</td>
                                    <td>@item.PlantName</td>
                                    <td>@item.PlantVarietyName</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
                else
                {
                    <p>No history available.</p>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="Close">Close</button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public string GardenId { get; set; } = string.Empty;
    [Parameter] public string GardenBedId { get; set; } = string.Empty;    
    [Parameter] public bool Show { get; set; }
    [Parameter] public EventCallback<bool> OnClose { get; set; }
    [Parameter] public string Top { get; set; } = "0px";
    [Parameter] public string Left { get; set; } = "0px";


    private List<GardenBedPlantHarvestCycleModel> UsageHistory { get; set; } = new();

    protected override async Task OnParametersSetAsync()
    {
        if (Show)
        {
            try
            {
                UsageHistory = await HarvestCycleService.GetGardenBedUsageHistory(GardenId, GardenBedId);
                UsageHistory = UsageHistory
                   .OrderBy(item => item.StartDate.HasValue ? 0 : 1)
                   .ThenBy(item => item.StartDate)
                   .ToList();
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Error fetching garden bed usage history");
            }
        }
    }

    private async Task Close()
    {
        Show = false;
        await OnClose.InvokeAsync(Show);
    }
}
