@inject ILogger<RectGardenBed> _logger;

<g transform="translate(@Component?.X, @Component?.Y) rotate(@(Component?.Rotate),@(Component?.GetWidthInPixels()/2),@(Component?.GetHeightInPixels()/2))">
    <rect x=0 y=0
          height="@(Component?.GetHeightInPixels())" width="@(Component?.GetWidthInPixels())"
          @attributes="AdditionalAttributes" cursor=@_cursor @onmousedown=OnDown class="@Component?.CssClass"></rect>
    <text x="0" y="-20" text-anchor="start" alignment-baseline="hanging" style="fill:#fff;fill-opacity: .95;">@Component?.Name</text>
</g>
@code {
    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object>? AdditionalAttributes { get; set; }

    [Parameter] public IVisualComponent? Component { get; set; }

    [Parameter] public Action<IVisualComponent, MouseEventArgs>? ComponentSelected { get; set; }

    [Parameter] public GardenPlanSettings? Settings { get; set; }


    string _cursor = "grab";

    void OnDown(MouseEventArgs e)
    {
        _logger.LogDebug("RectGardenBed - OnDown");
        if (ComponentSelected != null && Component != null) ComponentSelected(Component, e);
    }
}